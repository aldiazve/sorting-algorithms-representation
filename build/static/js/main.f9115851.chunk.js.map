{"version":3,"sources":["components/IsortCompPlot/index.js","App.js","serviceWorker.js","index.js"],"names":["Section","styled","div","_templateObject","IsortCompPlot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","findPerms","base","i","state","n","push","total","permLenght","setState","perm","xs","ret","length","rest","slice","concat","j","handleChange","event","target","value","npermut","showMenu","react_default","a","createElement","type","name","onChange","onClick","React","Component","AppContainer","App_templateObject","App","IsortCompPlot_IsortCompPlot","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+XAGA,IAAMA,EAAUC,IAAOC,IAAVC,KAMQC,cASnB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAURQ,UAAY,WAEV,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAIT,EAAKU,MAAMC,EAAGF,IAChCD,EAAKI,KAAKH,GAEZ,IAAMI,EAAQb,EAAKc,WAAWN,GAC9BR,EAAKe,SAAS,CAACF,MAAOA,KAjBNb,EAoBlBgB,KAAO,SAACC,GAGN,IAFA,IAAIC,EAAM,GAEDT,EAAI,EAAGA,EAAIQ,EAAGE,OAAQV,IAAK,CAClC,IAAIW,EAAOpB,EAAKgB,KAAKC,EAAGI,MAAM,EAAGZ,GAAGa,OAAOL,EAAGI,MAAMZ,EAAI,KAExD,GAAIW,EAAKD,OAGP,IAAI,IAAII,EAAI,EAAGA,EAAIH,EAAKD,OAAQI,GAAQ,EACtCL,EAAIN,KAAK,CAACK,EAAGR,IAAIa,OAAOF,EAAKG,UAH/BL,EAAIN,KAAK,CAACK,EAAGR,KAQjB,OAAOS,GAnCSlB,EAsClBc,WAAa,SAACG,GAGZ,IAFA,IAAIC,EAAM,GAEDT,EAAI,EAAGA,EAAIQ,EAAGE,OAAQV,IAAK,CAClC,IAAIW,EAAOpB,EAAKgB,KAAKC,EAAGI,MAAM,EAAGZ,GAAGa,OAAOL,EAAGI,MAAMZ,EAAI,KAExD,GAAIW,EAAKD,OAGP,IAAI,IAAII,EAAI,EAAGA,EAAIH,EAAKD,OAAQI,GAAQ,EACtCL,EAAIN,KAAK,CAACK,EAAGR,IAAIa,OAAOF,EAAKG,UAH/BL,EAAIN,KAAK,CAACK,EAAGR,KAQjB,OAAOS,EAAIC,QArDKnB,EAwDlBwB,aAAe,SAACC,GACdzB,EAAKe,SAAS,CAACJ,EAAGc,EAAMC,OAAOC,SAtD/B3B,EAAKU,MAAQ,CACXG,MAAO,EACPe,QAAS,EACTjB,EAAG,EACHkB,SAAU,QAPI7B,wEA6DhB,OACE8B,EAAAC,EAAAC,cAACtC,EAAD,KACEoC,EAAAC,EAAAC,cAAA,sBACCF,EAAAC,EAAAC,cAAA,wBAECF,EAAAC,EAAAC,cAAA,SACEC,KAAK,SACLC,KAAK,IACLP,MAAOxB,KAAKO,MAAMC,EAClBwB,SAAUhC,KAAKqB,gBAEnBM,EAAAC,EAAAC,cAAA,UAAQI,QAASjC,KAAKI,WAAtB,OACAuB,EAAAC,EAAAC,cAAA,UAAK7B,KAAKO,MAAMG,eAlFmBwB,IAAMC,yHCHjD,IAAMC,EAAe5C,IAAOC,IAAV4C,KAeHC,MAVf,WACE,OACEX,EAAAC,EAAAC,cAACO,EAAD,KACET,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACU,EAAD,QCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f9115851.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.div`\r\n  width: 45%;\r\n  margin-top: 20px;\r\n  background-color: gray;\r\n`;\r\n\r\nexport default class IsortCompPlot extends React.Component {\r\n  \r\n/*\r\nstatic long total = 0;\r\n  static long npermut = 0;\r\n  static int n=4;\r\n  TextField input;   // input values are entered here\r\n*/\r\n\r\n  constructor(props){\r\n    super(props);\r\n    // Initializating the premutation module:\r\n    this.state = {\r\n      total: 0,\r\n      npermut: 0,\r\n      n: 4,\r\n      showMenu: 'none',\r\n    }\r\n  };\r\n\r\n  findPerms = () => {\r\n    const base = [];\r\n    for (var i = 0; i < this.state.n; i++) {\r\n      base.push(i);\r\n    }\r\n    const total = this.permLenght(base);\r\n    this.setState({total: total});\r\n  }\r\n\r\n  perm = (xs) => {\r\n    let ret = [];\r\n\r\n    for (let i = 0; i < xs.length; i++) {\r\n      let rest = this.perm(xs.slice(0, i).concat(xs.slice(i + 1)));\r\n\r\n      if(!rest.length) {\r\n        ret.push([xs[i]])\r\n      } else {\r\n        for(let j = 0; j < rest.length; j = j + 1) {\r\n          ret.push([xs[i]].concat(rest[j]))\r\n        }\r\n      }\r\n    }\r\n    \r\n    return ret;\r\n  }\r\n\r\n  permLenght = (xs) => {\r\n    let ret = [];\r\n\r\n    for (let i = 0; i < xs.length; i++) {\r\n      let rest = this.perm(xs.slice(0, i).concat(xs.slice(i + 1)));\r\n\r\n      if(!rest.length) {\r\n        ret.push([xs[i]])\r\n      } else {\r\n        for(let j = 0; j < rest.length; j = j + 1) {\r\n          ret.push([xs[i]].concat(rest[j]))\r\n        }\r\n      }\r\n    }\r\n    \r\n    return ret.length;\r\n  }\r\n  \r\n  handleChange = (event) => {\r\n    this.setState({n: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <Section>\r\n        <p>Comp Plot</p>\r\n         <label>\r\n          Enter n: \r\n          <input\r\n            type='number'\r\n            name='n'\r\n            value={this.state.n}\r\n            onChange={this.handleChange}/>\r\n        </label>\r\n        <button onClick={this.findPerms}>Run</button>\r\n        <h4>{this.state.total}</h4>\r\n      </Section>\r\n    )\r\n  }\r\n};","import React from 'react';\nimport styled from 'styled-components'\n\n// Sorting components\nimport IsortCompPlot from './components/IsortCompPlot';\n\nconst AppContainer = styled.div`\n  width: 100vw;\n  padding: 0px 20px;\n`\n\nfunction App() {\n  return (\n    <AppContainer>\n      <h1>Sorting Algorithms Representation</h1>\n      <h3>Insertion Sort</h3>\n      <IsortCompPlot/>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}